Intel(R) Advisor can now assist with vectorization and show optimization
  report messages with your source code.
See "https://software.intel.com/en-us/intel-advisor-xe" for details.

    Report from: Interprocedural optimizations [ipo]

  WHOLE PROGRAM (SAFE) [EITHER METHOD]: false
  WHOLE PROGRAM (SEEN) [TABLE METHOD]: false
  WHOLE PROGRAM (READ) [OBJECT READER METHOD]: false

INLINING OPTION VALUES:
  -inline-factor: 100
  -inline-min-size: 30
  -inline-max-size: 230
  -inline-max-total-size: 2000
  -inline-max-per-routine: 10000
  -inline-max-per-compile: 500000

In the inlining report below:
   "sz" refers to the "size" of the routine. The smaller a routine's size,
      the more likely it is to be inlined.
   "isz" refers to the "inlined size" of the routine. This is the amount
      the calling routine will grow if the called routine is inlined into it.
      The compiler generally limits the amount a routine can grow by having
      routines inlined into it.

Begin optimization report for: my_remainder..xN2vv(double, double)

    Report from: Interprocedural optimizations [ipo]

DEAD STATIC FUNCTION: (my_remainder..xN2vv(double, double)) steric.h(10,1)

===========================================================================

Begin optimization report for: my_remainder..xM2vv(double, double)

    Report from: Interprocedural optimizations [ipo]

DEAD STATIC FUNCTION: (my_remainder..xM2vv(double, double)) steric.h(10,1)

===========================================================================

Begin optimization report for: my_remainder(double, double)

    Report from: Interprocedural optimizations [ipo]

DEAD STATIC FUNCTION: (my_remainder(double, double)) steric.h(10,1)

===========================================================================

Begin optimization report for: dist_and_disp(double, double, double, double, double, double, double, double *, double *, double *)

    Report from: Interprocedural optimizations [ipo]

DEAD STATIC FUNCTION: (dist_and_disp(double, double, double, double, double, double, double, double *, double *, double *)) steric.h(42,1)

===========================================================================

Begin optimization report for: IXCreate(double, int, int, IX *)

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (IXCreate(double, int, int, IX *)) [3/9=33.3%] interactions.c(47,1)
  -> EXTERN: (55,9) safe_malloc(size_t, void *, const char *, const char *, int)
  -> EXTERN: (61,9) safe_malloc(size_t, void *, const char *, const char *, int)
  -> EXTERN: (63,11) safe_malloc(size_t, void *, const char *, const char *, int)
  -> EXTERN: (65,13) safe_malloc(size_t, void *, const char *, const char *, int)
  -> EXTERN: (68,9) safe_malloc(size_t, void *, const char *, const char *, int)


    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at interactions.c(62,3)
   remark #15520: loop was not vectorized: loop with multiple exits cannot be vectorized unless it meets search loop idiom criteria

   LOOP BEGIN at interactions.c(64,5)
      remark #15520: loop was not vectorized: loop with multiple exits cannot be vectorized unless it meets search loop idiom criteria
   LOOP END
LOOP END
===========================================================================

Begin optimization report for: IXDestroy(IX *)

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (IXDestroy(IX *)) [4/9=44.4%] interactions.c(75,1)
  -> EXTERN: (78,3) free(void *)
  -> EXTERN: (82,7) free(void *)
  -> EXTERN: (84,5) free(void *)
  -> EXTERN: (86,3) free(void *)
  -> EXTERN: (87,3) free(void *)


    Report from: OpenMP optimizations [openmp]

interactions.c(79:3-79:3):OMP:IXDestroy:  OpenMP DEFINED LOOP WAS PARALLELIZED

    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at interactions.c(80,3)
   remark #15527: loop was not vectorized: function call to free(void *) cannot be vectorized   [ interactions.c(82,7) ]

   LOOP BEGIN at interactions.c(81,5)
      remark #15527: loop was not vectorized: function call to free(void *) cannot be vectorized   [ interactions.c(82,7) ]
   LOOP END
LOOP END
===========================================================================

Begin optimization report for: IXClearPairs(IX)

    Report from: Interprocedural optimizations [ipo]

DEAD STATIC FUNCTION: (IXClearPairs(IX)) interactions.c(94,1)

===========================================================================

Begin optimization report for: IXPushPair(IX, int, int)

    Report from: Interprocedural optimizations [ipo]

DEAD STATIC FUNCTION: (IXPushPair(IX, int, int)) interactions.c(100,1)

===========================================================================

Begin optimization report for: interactions_check(IX, Vector, double, int, ix_pair *, int *)

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (interactions_check(IX, Vector, double, int, ix_pair *, int *)) [7/9=77.8%] interactions.c(119,1)
  -> INLINE (MANUAL): (129,22) dist_and_disp(double, double, double, double, double, double, double, double *, double *, double *) (isz = 21) (sz = 46)
    -> EXTERN: steric.h:(44,14) remainder(double, double)
    -> EXTERN: steric.h:(45,14) remainder(double, double)
    -> EXTERN: steric.h:(46,14) remainder(double, double)
  -> EXTERN: (142,11) fprintf(FILE *__restrict__, const char *__restrict__, ...)


    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at interactions.c(125,3)
   remark #15520: loop was not vectorized: loop with multiple exits cannot be vectorized unless it meets search loop idiom criteria

   LOOP BEGIN at interactions.c(126,5)
      remark #15520: loop was not vectorized: loop with multiple exits cannot be vectorized unless it meets search loop idiom criteria

      LOOP BEGIN at interactions.c(135,9)
         remark #15520: loop was not vectorized: loop with multiple exits cannot be vectorized unless it meets search loop idiom criteria
      LOOP END
   LOOP END
LOOP END
===========================================================================

Begin optimization report for: IXGetPairs(IX, Vector, double, int *, ix_pair **)

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (IXGetPairs(IX, Vector, double, int *, ix_pair **)) [8/9=88.9%] interactions.c(155,1)
  -> EXTERN: (166,5) printf(const char *__restrict__, ...)
  -> EXTERN: (186,9) safe_malloc(size_t, void *, const char *, const char *, int)
  -> INLINE (MANUAL): (200,18) my_remainder(double, double) (isz = 5) (sz = 14)
    -> EXTERN: steric.h:(12,14) rint(double)
  -> INLINE: (223,3) IXClearPairs(IX) (isz = 0) (sz = 5)
  -> INLINE (MANUAL): (240,18) dist_and_disp(double, double, double, double, double, double, double, double *, double *, double *) (isz = 21) (sz = 46)
    -> EXTERN: steric.h:(44,14) remainder(double, double)
    -> EXTERN: steric.h:(45,14) remainder(double, double)
    -> EXTERN: steric.h:(46,14) remainder(double, double)
  -> INLINE: (247,15) IXPushPair(IX, int, int) (isz = 47) (sz = 56)
    -> EXTERN: (106,5) safe_malloc(size_t, void *, const char *, const char *, int)
    -> EXTERN: (107,5) memcpy(void *__restrict__, const void *__restrict__, size_t)
    -> EXTERN: (108,5) free(void *)
  -> INLINE (MANUAL): (271,20) dist_and_disp(double, double, double, double, double, double, double, double *, double *, double *) (isz = 21) (sz = 46)
    -> EXTERN: steric.h:(44,14) remainder(double, double)
    -> EXTERN: steric.h:(45,14) remainder(double, double)
    -> EXTERN: steric.h:(46,14) remainder(double, double)
  -> INLINE: (277,17) IXPushPair(IX, int, int) (isz = 47) (sz = 56)
    -> EXTERN: (106,5) safe_malloc(size_t, void *, const char *, const char *, int)
    -> EXTERN: (107,5) memcpy(void *__restrict__, const void *__restrict__, size_t)
    -> EXTERN: (108,5) free(void *)
  -> EXTERN: (289,3) free(void *)


    Report from: OpenMP optimizations [openmp]

interactions.c(246:15-246:15):OMP:IXGetPairs:  OpenMP multithreaded code generation for CRITICAL was successful
interactions.c(224:3-224:3):OMP:IXGetPairs:  OpenMP DEFINED LOOP WAS PARALLELIZED

    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at interactions.c(177,3)
   remark #25445: Loop Interchange not done due to: Data Dependencies
   remark #25446: Dependencies found between following statements:  [From_Line# -> (Dependency Type) To_Line#]
   remark #25447: Dependence found between following statements:  [181 -> (Flow) 181]
   remark #25447: Dependence found between following statements:  [181 -> (Anti) 181]
   remark #25447: Dependence found between following statements:  [181 -> (Output) 181]
   remark #25451: Advice: Loop Interchange, if possible, might help loopnest. Suggested Permutation : ( 1 2 3 ) --> ( 1 3 2 ) 
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
   remark #15346: vector dependence: assumed FLOW dependence between b line 181 and b line 181
   remark #15346: vector dependence: assumed ANTI dependence between b line 181 and b line 181

   LOOP BEGIN at interactions.c(178,5)
      remark #15344: loop was not vectorized: vector dependence prevents vectorization
      remark #15346: vector dependence: assumed FLOW dependence between b line 181 and b line 181
      remark #15346: vector dependence: assumed ANTI dependence between b line 181 and b line 181

      LOOP BEGIN at interactions.c(179,7)
         remark #15344: loop was not vectorized: vector dependence prevents vectorization
         remark #15346: vector dependence: assumed FLOW dependence between b line 181 and b line 181
         remark #15346: vector dependence: assumed ANTI dependence between b line 181 and b line 181
         remark #25439: unrolled with remainder by 2  
      LOOP END

      LOOP BEGIN at interactions.c(179,7)
      <Remainder>
      LOOP END
   LOOP END
LOOP END

LOOP BEGIN at interactions.c(191,3)
   remark #25096: Loop Interchange not done due to: Imperfect Loop Nest (Either at Source or due to other Compiler Transformations)
   remark #25451: Advice: Loop Interchange, if possible, might help loopnest. Suggested Permutation : ( 1 2 ) --> ( 2 1 ) 
   remark #25456: Number of Array Refs Scalar Replaced In Loop: 3
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
   remark #15346: vector dependence: assumed ANTI dependence between next line 195 and next line 215
   remark #15346: vector dependence: assumed FLOW dependence between next line 215 and next line 195

   LOOP BEGIN at interactions.c(198,16)
      remark #25436: completely unrolled by 3   (pre-vector) 
   LOOP END
LOOP END

LOOP BEGIN at interactions.c(225,3)
   remark #15541: outer loop was not auto-vectorized: consider using SIMD directive

   LOOP BEGIN at interactions.c(235,9)
      remark #15521: loop was not vectorized: loop control variable was not identified. Explicitly compute the iteration count before executing the loop or try using canonical loop form

      LOOP BEGIN at interactions.c(238,11)
         remark #15521: loop was not vectorized: loop control variable was not identified. Explicitly compute the iteration count before executing the loop or try using canonical loop form
      LOOP END
   LOOP END

   LOOP BEGIN at interactions.c(257,9)
      remark #15382: vectorization support: call to function safe_malloc(size_t, void *, const char *, const char *, int) cannot be vectorized   [ interactions.c(106,5) ]
      remark #15382: vectorization support: call to function memcpy(void *__restrict__, const void *__restrict__, size_t) cannot be vectorized   [ interactions.c(107,5) ]
      remark #15382: vectorization support: call to function free(void *) cannot be vectorized   [ interactions.c(108,5) ]
      remark #15344: loop was not vectorized: vector dependence prevents vectorization
      remark #15346: vector dependence: assumed ANTI dependence between box_neighbors line 265 and pair line 114
      remark #15346: vector dependence: assumed FLOW dependence between pair line 114 and box_neighbors line 265

      LOOP BEGIN at interactions.c(266,11)
         remark #15521: loop was not vectorized: loop control variable was not identified. Explicitly compute the iteration count before executing the loop or try using canonical loop form

         LOOP BEGIN at interactions.c(269,13)
            remark #15521: loop was not vectorized: loop control variable was not identified. Explicitly compute the iteration count before executing the loop or try using canonical loop form
         LOOP END
      LOOP END
   LOOP END
LOOP END

    Report from: Code generation optimizations [cg]

interactions.c(107,5):remark #34014: optimization advice for memcpy: increase the destination's alignment to 16 (and use __assume_aligned) to speed up library implementation
interactions.c(107,5):remark #34014: optimization advice for memcpy: increase the source's alignment to 16 (and use __assume_aligned) to speed up library implementation
interactions.c(107,5):remark #34026: call to memcpy implemented as a call to optimized library version
interactions.c(107,5):remark #34014: optimization advice for memcpy: increase the destination's alignment to 16 (and use __assume_aligned) to speed up library implementation
interactions.c(107,5):remark #34014: optimization advice for memcpy: increase the source's alignment to 16 (and use __assume_aligned) to speed up library implementation
interactions.c(107,5):remark #34026: call to memcpy implemented as a call to optimized library version
===========================================================================

Begin optimization report for: IXRestorePairs(IX, Vector, double, int *, ix_pair **)

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (IXRestorePairs(IX, Vector, double, int *, ix_pair **)) [9/9=100.0%] interactions.c(313,1)

===========================================================================
