Intel(R) Advisor can now assist with vectorization and show optimization
  report messages with your source code.
See "https://software.intel.com/en-us/intel-advisor-xe" for details.

    Report from: Interprocedural optimizations [ipo]

  WHOLE PROGRAM (SAFE) [EITHER METHOD]: false
  WHOLE PROGRAM (SEEN) [TABLE METHOD]: false
  WHOLE PROGRAM (READ) [OBJECT READER METHOD]: false

INLINING OPTION VALUES:
  -inline-factor: 100
  -inline-min-size: 30
  -inline-max-size: 230
  -inline-max-total-size: 2000
  -inline-max-per-routine: 10000
  -inline-max-per-compile: 500000

In the inlining report below:
   "sz" refers to the "size" of the routine. The smaller a routine's size,
      the more likely it is to be inlined.
   "isz" refers to the "inlined size" of the routine. This is the amount
      the calling routine will grow if the called routine is inlined into it.
      The compiler generally limits the amount a routine can grow by having
      routines inlined into it.

Begin optimization report for: potential(double, double, double, double, double, double, double)

    Report from: Interprocedural optimizations [ipo]

DEAD STATIC FUNCTION: (potential(double, double, double, double, double, double, double)) cloud.h(23,1)

===========================================================================

Begin optimization report for: compute_hamiltonian(int, double, const double **, const double **)

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (compute_hamiltonian(int, double, const double **, const double **)) [2/2=100.0%] hamiltonian.c(6,1)
  -> INLINE (MANUAL): (15,21) potential(double, double, double, double, double, double, double) (isz = 36) (sz = 55)
    -> EXTERN: cloud.h:(27,8) remainder(double, double)
    -> EXTERN: cloud.h:(28,8) remainder(double, double)
    -> EXTERN: cloud.h:(29,8) remainder(double, double)


    Report from: OpenMP optimizations [openmp]

hamiltonian.c(13:1-13:1):OMP:compute_hamiltonian:  OpenMP DEFINED LOOP WAS PARALLELIZED

    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at hamiltonian.c(10,3)
   remark #15521: loop was not vectorized: loop control variable was not identified. Explicitly compute the iteration count before executing the loop or try using canonical loop form
LOOP END

LOOP BEGIN at hamiltonian.c(14,7)
<Peeled loop for vectorization>
LOOP END

LOOP BEGIN at hamiltonian.c(14,7)
   remark #25084: Preprocess Loopnests: Moving Out Store    [ hamiltonian.c(17,9) ]
   remark #15389: vectorization support: reference X has unaligned access   [ cloud.h(27,8) ]
   remark #15389: vectorization support: reference X has unaligned access   [ cloud.h(28,8) ]
   remark #15389: vectorization support: reference X has unaligned access   [ cloud.h(29,8) ]
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15305: vectorization support: vector length 4
   remark #15309: vectorization support: normalized vectorization overhead 0.037
   remark #15525: call to function 'remainder' is serialized   [ cloud.h(27,8) ]
   remark #15525: call to function 'remainder' is serialized   [ cloud.h(28,8) ]
   remark #15525: call to function 'remainder' is serialized   [ cloud.h(29,8) ]
   remark #15300: LOOP WAS VECTORIZED
   remark #15442: entire loop may be executed in remainder
   remark #15450: unmasked unaligned unit stride loads: 3 
   remark #15475: --- begin vector loop cost summary ---
   remark #15476: scalar loop cost: 414 
   remark #15477: vector loop cost: 377.250 
   remark #15478: estimated potential speedup: 1.090 
   remark #15485: serialized function calls: 3
   remark #15488: --- end vector loop cost summary ---
   remark #15489: --- begin vector function matching report ---
   remark #15490: Function call: remainder(double, double) with simdlen=4, actual parameter types: (vector,uniform)   [ cloud.h(27,8) ]
   remark #15545: SIMD annotation was not seen, consider adding 'declare simd' directives at function declaration 
   remark #15490: Function call: remainder(double, double) with simdlen=4, actual parameter types: (vector,uniform)   [ cloud.h(28,8) ]
   remark #15545: SIMD annotation was not seen, consider adding 'declare simd' directives at function declaration 
   remark #15490: Function call: remainder(double, double) with simdlen=4, actual parameter types: (vector,uniform)   [ cloud.h(29,8) ]
   remark #15545: SIMD annotation was not seen, consider adding 'declare simd' directives at function declaration 
   remark #15493: --- end vector function matching report ---
LOOP END

LOOP BEGIN at hamiltonian.c(14,7)
<Remainder loop for vectorization>
LOOP END
===========================================================================
